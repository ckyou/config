" Setting up Vundle - the vim plugin bundler

let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')

if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/vundle
  let iCanHazVundle=0
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let Vundle manage Vundle (required!)
Plugin 'VundleVim/Vundle.vim'

" other plugins
Plugin 'bling/vim-airline'           
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'Raimondi/delimitMate'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'junegunn/vim-easy-align'
Plugin 'scrooloose/nerdcommenter'
Plugin 'mbbill/undotree'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'

" for c/c++ develpment
Plugin 'rip-rip/clang_complete' 

" All of your Plugins must be added before the following line
call vundle#end()            " required

" activate plugin 
filetype plugin indent on " enable filetype-specific plugins

"--- airline
set laststatus=2
set t_Co=256
set noshowmode "cancel the default mode indicator
let g:airline#extensions#whitespace#enabled = 0 " disable whitespace

if !exists('g:airline_symbols')
    let g:airline_symbols = {}  " need to define the dictionary first
endif
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.branch = '⎇'

let g:airline_theme='powerlineish' 
" theme files at .vim/bundle/vim-airline/autoload/airline/themes

"--- ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

"--- easy motion
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)prev

"--- easy-align 
" Start interactive EasyAlign in visual mode (e.g. vip,a)
xmap <leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. ,aip)
nmap <leader>a <Plug>(EasyAlign)

"--- nerdcommenter 
let g:NERDSpaceDelims = 1   "auto add a space between comment symbol
"  <leader>cc comment block
"  <leader>cu uncomment block 

"--- undotree
nnoremap <leader>h :UndotreeToggle<cr>
let g:undotree_WindowLayout = 2        " use layout 2, large diff panel
let g:undotree_SetFocusWhenToggle = 1  " forcus undotree panel while open
" this key maping only active while opening undotree panel
function g:Undotree_CustomMap()
   nmap <buffer> r <plug>UndotreeGoNextState		
   nmap <buffer> u <plug>UndotreeGoPreviousState
endfunc

" --- syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_auto_loc_list = 0   " don't open/close panel automatically
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_open = 1   " check when buffers loaded 
let g:syntastic_check_on_wq = 0     " skip check when :wq
let g:syntastic_error_symbol='✗'    
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'

" function to toggle error panel
" see: http://www.wklken.me/posts/2015/06/07/vim-plugin-syntastic.html
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <F4> :call ToggleErrors()<cr>
nnoremap <Leader>sn :lnext<cr>
nnoremap <Leader>sp :lprevious<cr>

" --- nerdtree 
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

nnoremap <F1> :NERDTreeToggle<CR> 

" --- clang_complete
let s:clang_library_path='/Library/Developer/CommandLineTools/usr/lib'
if isdirectory(s:clang_library_path)
        let g:clang_library_path = s:clang_library_path
        let g:clang_use_library  = 1
endif

let g:clang_user_options   = '|| exit 0'
let g:clang_complete_auto  = 1
let g:clang_complete_copen = 1
let g:clang_close_preview  = 1     
