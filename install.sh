#!/bin/sh

# Get the absolute path of this script
# from: http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# From: https://github.com/vinta/HAL-9000/blob/master/bin/open-the-pod-bay-doors
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
# Check if stdout is a terminal & support color 
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    BLUE="$(tput setaf 4)"
    GREEN="$(tput setaf 2)"
    RED="$(tput setaf 1)"
    YELLOW="$(tput setaf 3)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
else
    BLUE=""
    GREEN=""
    RED=""
    YELLOW=""
    BOLD=""
    NORMAL=""
fi

# Show message and wait user's answer 
confirm_prompt(){
    read -r -p "$1 ${BOLD}[y/N]${NORMAL}: " yn   
    case $yn in
        [yY][eE][sS]|[yY]) return 0 ;;  #TRUE      
        *) return 1 ;;                  #FALSE
    esac
}

create_soft_link(){
    echo
    echo "try to link ${BOLD}$2 ${NORMAL}to ${BOLD}$1${NORMAL}"
    if [ -L $2 ]; then
        if confirm_prompt "->link: $2 already exists, replace it? "; then
            ln -s -f $1 $2
            echo "-> ok, replace $1 "
        fi
    else
        ln -s $1 $2
        echo "-> ok, create the link"
    fi
}

# give name of dotfile in dotfiles folder, create link in HOME to it   
create_soft_link_by_name(){
    create_soft_link "$BASEDIR/$1" "$HOME/$1"
}

copy_safely(){
    echo
    echo "try to create target $2"
    if [ -f $2 ]; then
        if confirm_prompt "->file: $2 already exist, replace it?"; then
            cp -f $1 $2
        fi
    else
        cp $1 $2
    fi
}

# bash setting
copy_safely $BASEDIR/.bashrc.origin $BASEDIR/.bashrc 
create_soft_link_by_name .profile
create_soft_link_by_name .bashrc
create_soft_link_by_name .inputrc

# screen setting
create_soft_link_by_name .screenrc

# tmux setting 
create_soft_link_by_name .tmux.conf

# vim setting
## since Vim 7.4, user can put .vimrc inside $HOME/.vim/ folder 
## but for compatiability, still create a link in user'home folder 
create_soft_link_by_name ".vim"
create_soft_link "$HOME/.vim/vimrc" "$HOME/.vimrc"
        
# neovim setting 
if `command -v nvim > /dev/null 2>&1` \
    || confirm_prompt "you haven't install neovim, still create its configuration links?" ; then
    
    echo "try to link $HOME/.config/nvim & $HOME/.config/nvim/init.vim"
    if [ -L ~/.config ]; then
        mkdir ~/.config
    fi

    create_soft_link "$BASEDIR/.vim" "$HOME/.config/nvim"
    create_soft_link "$BASEDIR/.vim/vimrc" "$HOME/.config/nvim/init.vim"
fi

# try to get sensible.bash from https://github.com/mrzool/bash-sensible
if `command -v curl > /dev/null 2>&1` ; then 
    echo
    echo "try to get ${BOLD}sensible.bash${NORMAL} from https://github.com/mrzool/bash-sensible"
    curl "https://raw.githubusercontent.com/mrzool/bash-sensible/master/sensible.bash" \
          -o "$HOME/sensible.bash"
    
    echo
    echo "move it to $BASEDIR"
    SB_LOC="$BASEDIR/.sensible.bash"    
    mv -f  "$HOME/sensible.bash" "$SB_LOC"
    
    if confirm_prompt "modify .bashrc to use sensible.bash?" ; then
        
        mv $BASEDIR/.bashrc $BASEDIR/.bashrc.bak
        echo "# use sensible.bash from https://github.com/mrzool/bash-sensible" > $BASEDIR/.bashrc
        echo "# --below line is generated by $BASEDIR/install.sh--" >> $BASEDIR/.bashrc
        echo "[[ -s $SB_LOC ]] && source $SB_LOC " >> $BASEDIR/.bashrc
        echo "" >> $BASEDIR/.bashrc
        cat $BASEDIR/.bashrc.bak >> $BASEDIR/.bashrc


        # ask user whether keep backup of .bashrc or not
        ! confirm_prompt "backup .bashrc as $BASEDIR/.bashrc.bak?" && \
        rm -f $BASEDIR/.bashrc.bak
    fi
else
    echo "fail to get sensible.bash"
fi

          
